<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Router</title>
      <link href="/2019/04/22/Router/"/>
      <url>/2019/04/22/Router/</url>
      
        <content type="html"><![CDATA[<p>每个路由应用都必须通过 <code>Router</code> 对象来实现, 而对于web应用来说，<code>react-router-dom</code> 提供了 &lt;BrowserRouter&gt; 和 &lt;HashRouter&gt; 路由对象。它们都具有 <code>history</code> 对象，其区别在于 &lt;BrowserRouter&gt; 能够相应客户的动态请求requests; 而 &lt;HashRouter&gt; 提供的是静态文件服务器。<br><a id="more"></a></p><h2 id="BrowserRouter"><a href="#BrowserRouter" class="headerlink" title="BrowserRouter"></a>BrowserRouter</h2><p><hr style="margin: 0;height: 1px;"></p><p><code>&lt;BrowserRouter&gt;</code> 使用 HTML5 提供的 history API (<code>pushState</code>, <code>replaceState</code> 和 <code>popstate</code> 事件) 来保持 UI 和 URL 的同步。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; BrowserRouter &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"></span><br><span class="line">&lt;BrowserRouter</span><br><span class="line">  basename=&#123;string&#125;</span><br><span class="line">  forceRefresh=&#123;bool&#125;</span><br><span class="line">  getUserConfirmation=&#123;func&#125;</span><br><span class="line">  keyLength=&#123;number&#125;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;App /&gt;</span><br><span class="line">&lt;<span class="regexp">/BrowserRouter&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h3><h4 id="basename-string"><a href="#basename-string" class="headerlink" title="basename: string"></a>basename: string</h4><p>所有位置的基准 URL。如果你的应用程序部署在服务器的子目录，则需要将其设置为子目录。basename 的正确格式是前面有一个前导斜杠，但不能有尾部斜杠。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;BrowserRouter basename=<span class="string">"/calendar"</span>&gt;</span><br><span class="line">  &lt;Link to=<span class="string">"/today"</span> /&gt;</span><br><span class="line">&lt;<span class="regexp">/BrowserRouter&gt;</span></span><br></pre></td></tr></table></figure><p>上例中的 <code>&lt;Link&gt;</code> 最终将被呈现为： <code>&lt;a href=”/calendar/today” /&gt;</code></p><h4 id="forceRefresh-bool"><a href="#forceRefresh-bool" class="headerlink" title="forceRefresh: bool"></a>forceRefresh: bool</h4><p>如果为 true ，在导航的过程中整个页面将会刷新。一般情况下，只有在不支持 HTML5 history API 的浏览器中使用此功能。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> supportsHistory = <span class="string">'pushState'</span> <span class="keyword">in</span> <span class="built_in">window</span>.history;</span><br><span class="line"></span><br><span class="line">&lt;BrowserRouter forceRefresh=&#123;!supportsHistory&#125; /&gt;</span><br></pre></td></tr></table></figure><h4 id="getUserConfirmation-func"><a href="#getUserConfirmation-func" class="headerlink" title="getUserConfirmation: func"></a>getUserConfirmation: func</h4><p>用于确认导航的函数，默认使用 <code>window.confirm</code>。例如，当从 <code>/a</code> 导航至 <code>/b</code> 时，会使用默认的 <code>confirm</code> 函数弹出一个提示，用户点击确定后才进行导航，否则不做任何处理。<strong>注：需要配合 <code>&lt;Prompt&gt;</code> 一起使用。</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是默认的确认函数</span></span><br><span class="line"><span class="keyword">const</span> getConfirmation = <span class="function">(<span class="params">message, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> allowTransition = <span class="built_in">window</span>.confirm(message);</span><br><span class="line">  callback(allowTransition);</span><br><span class="line">&#125;</span><br><span class="line">&lt;BrowserRouter getUserConfirmation=&#123;getConfirmation&#125; /&gt;</span><br></pre></td></tr></table></figure></p><h4 id="keyLength-number"><a href="#keyLength-number" class="headerlink" title="keyLength: number"></a>keyLength: number</h4><p><code>location.key</code> 的长度，默认为 6。</p><p></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;BrowserRouter keyLength=&#123;<span class="number">12</span>&#125; /&gt;</span><br></pre></td></tr></table></figure><p><br></p><h2 id="HashRouter"><a href="#HashRouter" class="headerlink" title="HashRouter"></a>HashRouter</h2><p><hr style="margin: 0;height: 1px;"></p><p><code>&lt;HashRouter&gt;</code> 使用 <code>URL</code> 的 <code>hash</code> 部分（即 <code>window.location.hash</code>）来保持 UI 和 URL 的同步。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; HashRouter &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line">&lt;HashRouter&gt;</span><br><span class="line">  &lt;App /&gt;</span><br><span class="line">&lt;<span class="regexp">/HashRouter&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Props-1"><a href="#Props-1" class="headerlink" title="Props"></a>Props</h3><h4 id="basename-string-1"><a href="#basename-string-1" class="headerlink" title="basename: string"></a>basename: string</h4><p>所有位置的基准 URL。如果你的应用程序部署在服务器的子目录，则需要将其设置为子目录。basename 的正确格式是前面有一个前导斜杠，但不能有尾部斜杠。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;BrowserRouter basename=<span class="string">"/calendar"</span>&gt;</span><br><span class="line">  &lt;Link to=<span class="string">"/today"</span> /&gt;</span><br><span class="line">&lt;<span class="regexp">/BrowserRouter&gt;</span></span><br></pre></td></tr></table></figure></p><p>上例中的 <code>&lt;Link&gt;</code> 最终将被呈现为： <code>&lt;a href=”#/calendar/today” /&gt;</code></p><h4 id="getUserConfirmation-func-1"><a href="#getUserConfirmation-func-1" class="headerlink" title="getUserConfirmation: func"></a>getUserConfirmation: func</h4><p>用于确认导航的函数，默认使用 <code>window.confirm</code>。例如，当从 <code>/a</code> 导航至 <code>/b</code> 时，会使用默认的 <code>confirm</code> 函数弹出一个提示，用户点击确定后才进行导航，否则不做任何处理。<strong>注：需要配合 <code>&lt;Prompt&gt;</code> 一起使用。</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是默认的确认函数</span></span><br><span class="line"><span class="keyword">const</span> getConfirmation = <span class="function">(<span class="params">message, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> allowTransition = <span class="built_in">window</span>.confirm(message);</span><br><span class="line">  callback(allowTransition);</span><br><span class="line">&#125;</span><br><span class="line">&lt;BrowserRouter getUserConfirmation=&#123;getConfirmation&#125; /&gt;</span><br></pre></td></tr></table></figure></p><h4 id="hashType-string"><a href="#hashType-string" class="headerlink" title="hashType: string"></a>hashType: string</h4><p><code>window.location.hash</code> 使用的 <code>hash</code> 类型，默认<code>slash</code> 有如下几种：</p><p></p><ul><li>slash:  后面跟一个斜杠，例如 <code>#/</code> 和 <code>#/sunshine/lollipops</code>    </li><li>noslash:  后面没有斜杠，例如 <code>#</code> 和 <code>#sunshine/lollipops</code></li><li>hashbang:  Google 风格的 ajax crawlable，例如 <code>#!/</code> 和 <code>#!/sunshine/lollipops</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Route</title>
      <link href="/2019/04/22/Route/"/>
      <url>/2019/04/22/Route/</url>
      
        <content type="html"><![CDATA[<h3 id="关于path属性"><a href="#关于path属性" class="headerlink" title="关于path属性"></a>关于path属性</h3>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Route </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Link</title>
      <link href="/2019/04/22/Link/"/>
      <url>/2019/04/22/Link/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React_Router</title>
      <link href="/2019/04/22/React-Router/"/>
      <url>/2019/04/22/React-Router/</url>
      
        <content type="html"><![CDATA[<h2 id="Router、Route和Link的基本结构"><a href="#Router、Route和Link的基本结构" class="headerlink" title="Router、Route和Link的基本结构"></a>Router、Route和Link的基本结构</h2><p><hr style="margin: 0;height: 1px;"></p><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Router</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/home"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/other"</span>&gt;</span>其他页<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/home"</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/other"</span> <span class="attr">component</span>=<span class="string">&#123;Other&#125;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Router</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p><strong><a href="/2019/04/22/Link/" title="Link">Link</a>&ensp;</strong>代表一个链接，必须有一个to属性，代表链接地址，在HTML中显示为a标签。这个链接地址是一个相对路径。<br><strong><a href="/2019/04/22/Route/" title="Route">Route</a>&ensp;</strong>点击Link标签以后要显示的组件，有<code>path</code>和<code>component</code>两个属性。path属性值要与Link的to属性值相同。<br><strong style="color:red;">注：</strong>Router只能有一个子组件<br><br></p><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p><hr style="margin: 0;height: 1px;"><br>每个路由应用都必须通过 <strong><a href="/2019/04/22/Router/" title="Router">Router</a></strong> 对象来实现, 而对于web应用来说，<code>react-router-dom</code> 提供了 &lt;BrowserRouter&gt; 和 &lt;HashRouter&gt; 路由对象。它们都具有 <code>history</code> 对象，其区别在于 &lt;BrowserRouter&gt; 能够相应客户的动态请求requests; 而 &lt;HashRouter&gt; 提供的是静态文件服务器。</p><p><br><br><strong>More details: <a href="https://github.com/react-guide/react-router-cn" target="_blank" rel="noopener">React Router中文文档</a></strong><br><strong>Reference: <a href="https://manqc.site/mooc?tdsourcetag=s_pcqq_aiomsg" target="_blank" rel="noopener">Router详解</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>物联网概论</title>
      <link href="/2019/04/08/note/"/>
      <url>/2019/04/08/note/</url>
      
        <content type="html"><![CDATA[<p><img src="/2019/04/08/note/1.jpg" alt="图片加载失败"><br><a id="more"></a></p><h2 id="一、-无线传感器网络（WSN）最新的技术发展"><a href="#一、-无线传感器网络（WSN）最新的技术发展" class="headerlink" title="一、 无线传感器网络（WSN）最新的技术发展"></a>一、 无线传感器网络（WSN）最新的技术发展</h2><h3 id="能源供应："><a href="#能源供应：" class="headerlink" title="能源供应："></a>能源供应：</h3><ol><li>多供电方式的无线传感器网络电源电路<br>以提高多类型电源供电时节点的安全性为目的,通过二极管和MOS的开关特性隔离多种供电电源的相互干扰,提出了一种多类型电源供电、高安全性的电源电路。</li><li>无线充电技术在无线传感器网络的应用<br>目前能量管理研究侧重于节能方向,但随着无线充电技术取得突破性进展,现已可从主动能量供应方面来对无线传感器网络进行能量管理。</li><li>设立带无线能量补充设备的无线传感网络基站</li></ol><h3 id="路由："><a href="#路由：" class="headerlink" title="路由："></a>路由：</h3><ol><li>基于多因素的能量优化分簇路由算法</li><li>基于路径质量的无线传感网路由协议</li></ol><h3 id="节点定位："><a href="#节点定位：" class="headerlink" title="节点定位："></a>节点定位：</h3><ol><li>改进的抵御虫洞攻击的距离矢量跳(DV-Hop)安全定位算法</li></ol><h2 id="二、-当前WSN技术发展最大的瓶颈"><a href="#二、-当前WSN技术发展最大的瓶颈" class="headerlink" title="二、 当前WSN技术发展最大的瓶颈"></a>二、 当前WSN技术发展最大的瓶颈</h2><h3 id="能源供应问题"><a href="#能源供应问题" class="headerlink" title="能源供应问题"></a>能源供应问题</h3><p>当由于无线传感器节点个数众多、分布区域广且工作环境复杂，大多数情况下，用更换电池的方式来给节点补充能源并不现实，所以除了必须采取种种降低功耗的措施来延长节点的工作寿命之外，还需要探索节点补充能源的方案。使用高能电池、降低传感器功率、自我收集能量（例如太阳能）以及目前正在试验阶段的无线充电技术都是为解决能源供应问题提供的解决方案。</p><h3 id="其他瓶颈"><a href="#其他瓶颈" class="headerlink" title="其他瓶颈"></a>其他瓶颈</h3><ol><li>硬件资源有限。节点由于受到价格、体积和功耗的限制，在通信能力、计算能力和内存空间等方面比普通计算机要弱很多。通常节点的通信距离一般在几十米到几百米范围内，因此节点只能与它相邻的节点直接通信。如果希望与其射频覆盖范围之外的节点进行通信，则需要通过中间节点进行路由，这样每个节点既可以是信息的发起者，也可以是信息的转发者。另外，由于节点的计算能力受限，而传统互联网上成熟的协议和算法对WSN而言开销太大，因此必须重新设计简单有效的协议。</li><li>网络安全协议问题。传感器节点的远距离和无人值守增加了它们遭到恶意入侵和破坏的机会；此外，无线通信很容易遭到窃听。</li><li>易受物理环境影响。WSN与其所在物理环境密切相关，并随着环境的变化而不断变化。所以，要求WSN实现节点的自我管理，具有动态环境变化的适应性。</li></ol><h2 id="三、-无线传感器网络能量供应不再成问题时"><a href="#三、-无线传感器网络能量供应不再成问题时" class="headerlink" title="三、    无线传感器网络能量供应不再成问题时"></a>三、    无线传感器网络能量供应不再成问题时</h2><ol><li>对于节点来说，可以存储全部传感器网络的拓扑结构信息，可以通过更加复杂的网络协议访问远程的节点，传输的功率也将会大大提升。</li><li>传感器网络的拓扑控制可以在满足网络的覆盖率和连通度的前提下，通过骨干网节点的选择，剔除节点之间不必要的无线链路。</li><li>节点定位的算法和定位技术不必再满足极其复杂的规则，通过更简单的算法准确获取每个节点的位置信息。</li><li>对于无线传感网络的数据管理技术也不必受到能源的限制，不用考虑能耗和服务有效性之间的平衡，只需考虑数据服务的可靠性、安全性以及准确性。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Homework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WSN </tag>
            
            <tag> 物联网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/04/02/hello-world/"/>
      <url>/2019/04/02/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id><a href="#" class="headerlink" title></a><a href="/2019/04/08/note/" title="Create a new post">Create a new post</a></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> model </category>
          
      </categories>
      
      
        <tags>
            
            <tag> model </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
